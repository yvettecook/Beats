<?xml version="1.0" encoding="UTF-8"?>
<VariablesViewState
   version = "1.0">
   <ContextStates>
      <ContextState
         contextName = "SessionRecorderTests.testSingletonIsSame() -&gt; ():SessionRecorderTests.swift">
         <PersistentStrings>
            <PersistentString
               value = "self.sessionRecorder">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "HeartRateViewController.presentationControllerForPresentedViewController(UIViewController, presentingViewController : UIViewController, sourceViewController : UIViewController) -&gt; UIPresentationController?:HeartRateViewController.swift">
         <PersistentStrings>
            <PersistentString
               value = "presentingViewController">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "HeartRateViewControllerTests.(testHeartRateViewDisplayCurrentHR(HeartRateViewControllerTests) -&gt; () -&gt; ()).(closure #1):HeartRateViewControllerTests.swift">
         <PersistentStrings>
            <PersistentString
               value = "self.heartRateVC.heartRateKit">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "ScanningViewControllerTests.testHasState() -&gt; ():ScanningViewControllerTests.swift">
         <PersistentStrings>
            <PersistentString
               value = "scanningVC">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "MockCentralManager.connectPeripheral(MockPeripheral, options : [String : AnyObject]?) -&gt; ():MockCentralManager.swift">
         <PersistentStrings>
            <PersistentString
               value = "delegate">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "MockPeripheral.discoverServices([CBUUID]?) -&gt; ():MockPeripheral.swift">
         <PersistentStrings>
            <PersistentString
               value = "heartRateService!">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "MockBluetoothController.state.didset:MockBluetoothController.swift">
         <PersistentStrings>
            <PersistentString
               value = "delegate">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "MockBluetoothController.peripheral(MockPeripheral, didUpdateValueForCharacteristic : CBCharacteristic, error : NSError?) -&gt; ():MockBluetoothController.swift">
         <PersistentStrings>
            <PersistentString
               value = "characteristic.value">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "StubSessionRecorder.state.didset:RecordingControlsViewController.swift">
         <PersistentStrings>
            <PersistentString
               value = "delegate">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "HeartRateViewController.hrKitDidUpdateBPM(Int) -&gt; ():HeartRateViewController.swift">
         <PersistentStrings>
            <PersistentString
               value = "sessionRecord">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "SessionRecorder.addValue(Int) -&gt; ():SessionRecorder.swift">
         <PersistentStrings>
            <PersistentString
               value = "currentSession">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
   </ContextStates>
</VariablesViewState>
